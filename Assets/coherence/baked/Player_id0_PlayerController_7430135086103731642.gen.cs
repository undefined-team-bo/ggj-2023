// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using Coherence.ProtocolDef;
	using Coherence.Serializer;
	using Coherence.SimulationFrame;
	using Coherence.Entity;
	using Coherence.Utils;
	using Coherence.Brook;
	using Coherence.Toolkit;
	using UnityEngine;

	public struct Player_id0_PlayerController_7430135086103731642 : ICoherenceComponentData
	{
		public int actualInventory;
		public int B;
		public int G;
		public int R;
		public string playerNameString;

		public override string ToString()
		{
			return $"Player_id0_PlayerController_7430135086103731642(actualInventory: {actualInventory}, B: {B}, G: {G}, R: {R}, playerNameString: {playerNameString})";
		}

		public uint GetComponentType() => Definition.InternalPlayer_id0_PlayerController_7430135086103731642;

		public const int order = 0;

		public int GetComponentOrder() => order;

		public AbsoluteSimulationFrame Frame;
	
		private static readonly int _actualInventory_Min = -2147483648;
		private static readonly int _actualInventory_Max = 2147483647;
		private static readonly int _B_Min = -2147483648;
		private static readonly int _B_Max = 2147483647;
		private static readonly int _G_Min = -2147483648;
		private static readonly int _G_Max = 2147483647;
		private static readonly int _R_Min = -2147483648;
		private static readonly int _R_Max = 2147483647;

		public void SetSimulationFrame(AbsoluteSimulationFrame frame)
		{
			Frame = frame;
		}

		public AbsoluteSimulationFrame GetSimulationFrame() => Frame;

		public ICoherenceComponentData MergeWith(ICoherenceComponentData data, uint mask)
		{
			var other = (Player_id0_PlayerController_7430135086103731642)data;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				actualInventory = other.actualInventory;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				B = other.B;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				G = other.G;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				R = other.R;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				playerNameString = other.playerNameString;
			}
			mask >>= 1;
			return this;
		}

		public static void Serialize(Player_id0_PlayerController_7430135086103731642 data, uint mask, IOutProtocolBitStream bitStream)
		{
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data.actualInventory, _actualInventory_Min, _actualInventory_Max, "Player_id0_PlayerController_7430135086103731642.actualInventory");
				data.actualInventory = Coherence.Utils.Bounds.Clamp(data.actualInventory, _actualInventory_Min, _actualInventory_Max);
				bitStream.WriteIntegerRange(data.actualInventory, 32, -2147483648);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data.B, _B_Min, _B_Max, "Player_id0_PlayerController_7430135086103731642.B");
				data.B = Coherence.Utils.Bounds.Clamp(data.B, _B_Min, _B_Max);
				bitStream.WriteIntegerRange(data.B, 32, -2147483648);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data.G, _G_Min, _G_Max, "Player_id0_PlayerController_7430135086103731642.G");
				data.G = Coherence.Utils.Bounds.Clamp(data.G, _G_Min, _G_Max);
				bitStream.WriteIntegerRange(data.G, 32, -2147483648);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data.R, _R_Min, _R_Max, "Player_id0_PlayerController_7430135086103731642.R");
				data.R = Coherence.Utils.Bounds.Clamp(data.R, _R_Min, _R_Max);
				bitStream.WriteIntegerRange(data.R, 32, -2147483648);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				bitStream.WriteShortString(data.playerNameString);
			}
			mask >>= 1;
		}

		public static (Player_id0_PlayerController_7430135086103731642, uint, uint?) Deserialize(InProtocolBitStream bitStream)
		{
			var mask = (uint)0;
			var val = new Player_id0_PlayerController_7430135086103731642();
	
			if (bitStream.ReadMask())
			{
				val.actualInventory = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000000000000001;
			}
			if (bitStream.ReadMask())
			{
				val.B = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000000000000010;
			}
			if (bitStream.ReadMask())
			{
				val.G = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000000000000100;
			}
			if (bitStream.ReadMask())
			{
				val.R = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000000000001000;
			}
			if (bitStream.ReadMask())
			{
				val.playerNameString = bitStream.ReadShortString();
				mask |= 0b00000000000000000000000000010000;
			}
			return (val, mask, null);
		}
		public static (Player_id0_PlayerController_7430135086103731642, uint, uint?) DeserializeArchetypePlayer_2f37b1be90c58714f91aba02c042dfd9_Player_id0_PlayerController_7430135086103731642_LOD0(InProtocolBitStream bitStream)
		{
			var mask = (uint)0;
			var val = new Player_id0_PlayerController_7430135086103731642();
			if (bitStream.ReadMask())
			{
				val.actualInventory = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000000000000001;
			}
			if (bitStream.ReadMask())
			{
				val.B = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000000000000010;
			}
			if (bitStream.ReadMask())
			{
				val.G = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000000000000100;
			}
			if (bitStream.ReadMask())
			{
				val.R = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000000000001000;
			}
			if (bitStream.ReadMask())
			{
				val.playerNameString = bitStream.ReadShortString();
				mask |= 0b00000000000000000000000000010000;
			}

			return (val, mask, 0);
		}

		/// <summary>
		/// Resets byte array references to the local array instance that is kept in the lastSentData.
		/// If the array content has changed but remains of same length, the new content is copied into the local array instance.
		/// If the array length has changed, the array is cloned and overwrites the local instance.
		/// If the array has not changed, the reference is reset to the local array instance.
		/// Otherwise, changes to other fields on the component might cause the local array instance reference to become permanently lost.
		/// </summary>
		public void ResetByteArrays(ICoherenceComponentData lastSent, uint mask)
		{
			var last = lastSent as Player_id0_PlayerController_7430135086103731642?;
	
		}
	}
}